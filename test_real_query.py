#!/usr/bin/env python3
"""
Script para probar la consulta real y ver qué estima vs lo que debería estimar
"""
import json
from config import SatelliteConfigGOES

# Consulta real del usuario
query_data = {
    "sat": "GOES-16",
    "sensor": "abi", 
    "nivel": "L1b",
    "bandas": ["all"],
    "dominio": "conus",
    "creado_por": "vescudero@geografia.unam.mx",
    "fechas": {
        "20190114": ["01:00-05:41", "08:00-11:35", "15:00-21:50"],
        "20190115": ["00:00-04:30", "10:00-13:30"],
        "20190116": ["09:30-13:30", "18:00-22:50"],
        "20190123": ["03:00-06:00"],
        "20190210": ["22:00-23:55"],
        "20190211": ["00:00-07:50"],
        "20190214": ["21:00-23:55"],
        "20190215": ["00:00-06:50"],
        "20190216": ["06:30-09:30", "12:00-15:00", "22:00-23:55"],
        "20190217": ["00:00-01:00", "03:00-06:00", "10:00-19:00", "22:00-23:55"],
        "20190218": ["00:00-08:00", "13:00-16:00"],
        "20190219": ["12:00-15:00"],
        "20190220": ["08:00-13:00"],
        "20190221": ["02:00", "14:30", "21:00-23:55"],
        "20190222": ["06:00-09:00"],
        "20190223": ["00:00-09:30", "15:30-18:30", "21:30-23:55"],
        "20190224": ["23:00-23:55"],
        "20190225": ["00:00-08:00"],
        "20190226": ["11:30-15:00", "16:30-20:00", "21:30-23:55"],
        "20190227": ["13:00-16:00"],
        "20190228": ["03:00-06:30", "12:00-15:30", "18:00-22:30"],
        "20190301": ["03:00-06:30", "09:00-16:30"],
        "20190302": ["16:30-20:00", "22:30-23:55"],
        "20190303": ["00:00-01:00", "04:30-11:00"],
        "20190304": ["11:15-14:30", "20:30-23:55"],
        "20190306": ["14:00-17:30", "23:00-23:55"],
        "20190307": ["00:00-03:00", "12:00-15:00", "17:15-20:30"],
        "20190308": ["21:00-23:55"],
        "20190309": ["05:00-08:30"],
        "20190310": ["21:00-23:55"],
        "20190313": ["11:00-16:30", "20:00-23:30"],
        "20190314": ["20:00-23:00"],
        "20190315": ["00:00-03:00"],
        "20190316": ["08:30-11:55", "15:00-18:30"],
        "20190317": ["02:30-07:30"],
        "20190319": ["03:00-06:30"],
        "20190321": ["04:00-07:30"],
        "20190323": ["00:00-03:00"],
        "20190327": ["01:00-04:30"],
        "20190328": ["12:30-15:30"],
        "20190329": ["01:30-04:30"],
        "20190410": ["17:30-21:00"],
        "20190411": ["17:00-20:30"],
        "20190504": ["00:00-03:30"],
        "20190505": ["00:00-03:00"],
        "20190516": ["13:00-16:30"],
        "20190523": ["00:00-03:00"],
        "20190528": ["18:00-21:00"],
        "20190529": ["16:00-19:30"],
        "20190531": ["01:30-05:00", "18:30-23:55"],
        "20190601": ["00:00-02:00"],
        "20190603": ["14:00-18:00"],
        "20190611": ["07:00-10:00"],
        "20190612": ["18:00-21:00"],
        "20190613": ["23:00-23:55"],
        "20190614": ["00:00-02:00", "09:00-19:40"],
        "20190617": ["11:30-15:00", "17:30-23:55"],
        "20190622": ["01:30-05:00"],
        "20190628": ["04:00-07:30"],
        "20190629": ["04:30-08:00", "18:00-22:00"],
        "20190630": ["05:30-12:40", "14:00-17:30"],
        "20190701": ["03:00-10:00", "16:30-23:55"],
        "20190702": ["00:00-02:30", "11:00-20:00", "21:00-23:55"],
        "20190703": ["03:30-06:30", "16:00-19:30"],
        "20190704": ["00:00-03:30", "08:00-12:15"],
        "20190707": ["09:00-18:00", "19:00-22:30"],
        "20190708": ["00:30-12:00", "14:30-18:00"],
        "20190709": ["07:00-10:30", "12:30-18:50"],
        "20190710": ["05:30-08:30"],
        "20190712": ["00:30-04:00", "20:30-23:30"],
        "20190713": ["05:00-08:30", "22:30-23:55"],
        "20190714": ["00:00-04:00"],
        "20190716": ["03:30-07:00", "08:30-17:30"],
        "20190717": ["00:00-03:30"],
        "20190718": ["08:00-14:30", "17:00-20:30"],
        "20190719": ["03:00-11:30", "13:30-16:50"],
        "20190720": ["01:30-05:00", "09:30-17:30"],
        "20190721": ["00:00-23:55"],
        "20190722": ["04:30-08:00", "12:30-16:30", "18:00-23:55"],
        "20190723": ["14:00-17:00"],
        "20190724": ["07:15-10:45", "13:00-21:50"],
        "20190725": ["00:00-03:00"],
        "20190726": ["00:00-11:50", "21:30-23:55"],
        "20190727": ["00:00-08:30", "09:30-12:45", "16:00-22:50"],
        "20190728": ["04:30-08:00", "10:30-17:55"],
        "20190729": ["09:30-19:50"],
        "20190730": ["04:30-08:40"],
        "20190731": ["07:30-23:55"],
        "20190802": ["09:30-14:00", "15:30-22:30"],
        "20190803": ["21:30-23:55"],
        "20190804": ["00:00-01:30", "08:30-12:00"],
        "20190805": ["00:00-03:30", "08:00-16:30", "19:45-23:00"],
        "20190807": ["02:00-05:30"],
        "20190808": ["07:40-11:45", "22:30-23:55"],
        "20190809": ["00:00-05:00", "10:30-16:40", "22:30-23:55"],
        "20190810": ["00:00-02:00", "16:00-19:25"],
        "20190811": ["19:00-23:55"],
        "20190812": ["00:00-03:30", "05:15-08:45"],
        "20190813": ["07:00-13:50", "14:00-17:30", "18:00-23:55"],
        "20190814": ["00:00-16:50"],
        "20190815": ["05:00-20:00"],
        "20190816": ["13:20-22:00"],
        "20190817": ["10:00-13:30", "18:30-23:55"],
        "20190818": ["00:00-02:30", "12:00-19:00"],
        "20190819": ["04:00-10:45", "21:45-23:55"],
        "20190821": ["00:00-04:30", "23:00-23:55"],
        "20190822": ["00:00-02:30", "04:30-07:50", "09:00-12:30"],
        "20190823": ["01:00-04:30", "14:00-17:30", "19:00-23:55"],
        "20190824": ["00:00-08:00", "09:00-23:55"],
        "20190825": ["00:00-05:30", "08:15-16:00"],
        "20190826": ["02:45-07:00", "15:40-19:15"],
        "20190827": ["15:15-18:45"],
        "20190828": ["07:00-13:30"],
        "20190829": ["01:00-13:00"],
        "20190930": ["20:00-23:30"],
        "20191002": ["05:20-12:10"],
        "20191003": ["09:15-14:30"],
        "20191004": ["04:00-07:30", "10:30-19:50"],
        "20191005": ["11:15-14:50", "21:00-23:55"],
        "20191006": ["08:00-11:30", "13:15-16:50"],
        "20191007": ["04:50-11:00", "12:30-16:00"],
        "20191009": ["08:00-16:10", "17:30-20:50"],
        "20191010": ["11:30-23:55"],
        "20191011": ["00:00-04:50", "06:00-22:50"],
        "20191012": ["08:00-13:30", "15:00-18:30"],
        "20191013": ["19:45-23:15"],
        "20191014": ["07:15-10:45"],
        "20191015": ["02:30-09:20", "14:00-17:30", "18:00-21:20", "22:15-23:55"],
        "20191016": ["00:00-06:55"],
        "20191017": ["06:30-14:30", "19:30-23:00"],
        "20191019": ["04:00-07:30", "16:00-19:30", "22:00-23:55"],
        "20191020": ["00:00-17:30"],
        "20191021": ["09:00-23:55"],
        "20191022": ["00:00-02:50", "19:30-23:55"],
        "20191023": ["00:00-05:00"],
        "20191025": ["13:30-17:00"],
        "20191026": ["08:00-11:00"],
        "20191102": ["02:30-06:00", "13:30-16:50"],
        "20191103": ["07:00-12:30"],
        "20191104": ["06:00-09:40", "16:30-20:00"],
        "20191105": ["04:00-09:10", "23:00-23:55"],
        "20191106": ["00:00-02:30", "04:00-07:50", "09:00-14:00", "16:15-21:00", "22:30-23:55"],
        "20191107": ["00:00-09:30", "12:30-15:55"],
        "20191109": ["15:00-18:30"],
        "20191110": ["02:30-05:55", "12:15-15:50", "22:00-23:55"],
        "20191112": ["00:00-01:30", "03:30-07:00", "14:30-17:40"],
        "20191113": ["07:15-10:45"],
        "20191116": ["14:30-18:00"],
        "20191117": ["00:00-03:30", "14:30-17:30"],
        "20191119": ["10:30-18:10", "22:30-23:55"],
        "20191125": ["00:00-02:15", "07:45-11:15"],
        "20191126": ["16:00-19:30"],
        "20191128": ["08:00-11:30"],
        "20191221": ["11:00-14:30"],
        "20191226": ["16:00-19:30"]
    }
}

def main():
    config = SatelliteConfigGOES()
    
    print("=== Análisis de la consulta real ===")
    print(f"Nivel: {query_data['nivel']}")
    print(f"Dominio: {query_data['dominio']}")
    print(f"Bandas: {query_data['bandas']}")
    print(f"Total fechas: {len(query_data['fechas'])}")
    
    # Estimar con la configuración actual
    estimation = config.estimate_files_summary(query_data)
    
    print("\n=== Estimación actual ===")
    print(f"Archivos estimados: {estimation['file_count']:,}")
    print(f"Tamaño estimado: {estimation['total_size_mb']:,.2f} MB")
    print(f"Tamaño estimado: {estimation['total_size_gb']:,.3f} GB")
    print(f"Tamaño promedio por archivo: {estimation['average_file_size_mb']:.2f} MB")
    
    print(f"\n=== Comparación con medido ===")
    print(f"Tamaño real reportado: 1,752,935.22 MB ({1752935.22/1024:.2f} GB)")
    print(f"Estimado actual: {estimation['total_size_mb']:,.2f} MB ({estimation['total_size_gb']:.2f} GB)")
    factor = 1752935.22 / estimation['total_size_mb'] if estimation['total_size_mb'] > 0 else 0
    print(f"Factor de diferencia: {factor:.2f}x")
    
    # Analizar algunas fechas específicas para debug
    print(f"\n=== Debug: análisis detallado ===")
    
    # Tomar una fecha de muestra para analizar
    fecha_muestra = "20190721"  # Esta tiene "00:00-23:55" (día completo)
    horarios_muestra = query_data['fechas'][fecha_muestra]
    
    print(f"Fecha muestra: {fecha_muestra}")
    print(f"Horarios: {horarios_muestra}")
    
    # Crear sub-query para esta fecha específica
    sub_query = dict(query_data)
    sub_query['fechas'] = {fecha_muestra: horarios_muestra}
    
    sub_estimation = config.estimate_files_summary(sub_query)
    print(f"Archivos en esta fecha: {sub_estimation['file_count']}")
    print(f"Tamaño en esta fecha: {sub_estimation['total_size_mb']:.2f} MB")
    
    # Calcular manualmente para verificar
    print(f"\n=== Cálculo manual para verificar ===")
    
    # Para CONUS L1b, archivos cada 5 min en minutos terminados en 1 o 6
    # "00:00-23:55" debería cubrir todo el día
    # En un día hay 1440 minutos
    # Minutos terminados en 1: 1, 11, 21, 31, 41, 51 (6 por hora * 24 horas = 144)
    # Minutos terminados en 6: 6, 16, 26, 36, 46, 56 (6 por hora * 24 horas = 144)
    # Total: 288 archivos por banda por día
    # Con 16 bandas: 288 * 16 = 4,608 archivos
    
    archivos_esperados_por_dia_completo = 288 * 16
    print(f"Archivos esperados para día completo (cálculo manual): {archivos_esperados_por_dia_completo}")
    
    # Peso promedio por archivo CONUS L1b
    pesos_conus = config.GOES_WEIGHTS['L1b']['conus']
    peso_promedio = sum(pesos_conus.values()) / len(pesos_conus)
    print(f"Peso promedio por archivo: {peso_promedio:.2f} MB")
    
    tamano_esperado_dia = archivos_esperados_por_dia_completo * peso_promedio
    print(f"Tamaño esperado para día completo: {tamano_esperado_dia:.2f} MB")
    
if __name__ == "__main__":
    main()